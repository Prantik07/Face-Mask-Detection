"""FaceMaskDetector_Part-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OeMxhE4qLO-O11IICvqWTIwGjmOaHXSs

# Detecting masks in real time
"""

# import the required packages
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.models import load_model
from imutils.video import VideoStream
import numpy as np
import imutils
import time
import cv2
import os



def detectFace_and_predictMask(frame, faceDetector, maskDetector):
    
    # grabbing the dimensions of the frame and then constructing a blob from it

	(h, w) = frame.shape[:2]
	blob = cv2.dnn.blobFromImage(frame, 1.0, (224, 224), (104.0, 177.0, 123.0))

	# passing the blob through the NeuralNet i.e. faceDetector and obtaining the face detections
	faceDetector.setInput(blob)
	detections = faceDetector.forward()
	print(detections.shape)

	# initializing our list of faces, their corresponding locations,
	# and the list of predictions from our face mask network
	faces = []
	locs = [] # A list of tuples
	preds = []

	# looping over the detections
	for i in range(0, detections.shape[2]):
		# extract the confidence (i.e., probability) associated with
		# the detection
		confidence = detections[0, 0, i, 2]

		# filtering out the weak detections by ensuring the confidence is
		# greater than a minimum confidence 
		if confidence > 0.5:
			# computing the (x, y)-coordinates of the bounding box for the detected face
			box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
			(startX, startY, endX, endY) = box.astype("int")

			# ensure the bounding boxes fall within the dimensions of the frame
			(startX, startY) = (max(0, startX), max(0, startY))
			(endX, endY) = (min(w - 1, endX), min(h - 1, endY))

			# extracting the face ROI, converting it from BGR to RGB channel
			# resizing it to 224x224, and preprocessing it for mobileNet
			face = frame[startY:endY, startX:endX]
			face = cv2.cvtColor(face, cv2.COLOR_BGR2RGB)
			face = cv2.resize(face, (224, 224))
			face = img_to_array(face)
			face = preprocess_input(face)

			# add the face and bounding boxes to their respective
			# lists
			faces.append(face)
			locs.append((startX, startY, endX, endY))

	# we make predictions if at least one face was detected
	if len(faces) > 0:

		faces = np.array(faces, dtype="float32")
		preds = maskDetector.predict(faces, batch_size=32)

	# return a tuple of the face locations and their corresponding mask detection
	return (locs, preds)

# loading the predefined faceDetector model
prototxtPath = r"E:/Face-Mask-Detection-master/face_detector/deploy.prototxt"
weightsPath = r"E:/Face-Mask-Detection-master/face_detector/res10_300x300_ssd_iter_140000.caffemodel"
faceDetector = cv2.dnn.readNet(prototxtPath, weightsPath)

#loading the maskDetector model
maskDetector = load_model("E:/Face-Mask-Detection-master/SavedModel_2.h5")

# detecting masks in real time video

vs = VideoStream(src=0).start() # '0' indicates webcam

# looping over the frames from the video stream
while True:
	# grabingb the frames from the video stream and resizing it to have a maximum width of 400 pixels
	frame = vs.read()
	frame = imutils.resize(frame, width=400)

	# detecting faces in the frame and determine if they are wearing a face mask or not
	(locs, preds) = detectFace_and_predictMask(frame, faceDetector, maskDetector)

	# looping over the detected face locations and detecting presence of a mask
	for (box, pred) in zip(locs, preds):
		# unpack the bounding box and predictions
		(startX, startY, endX, endY) = box
		(mask, withoutMask) = pred

		# determining the class label and color we'll use to draw the bounding box and text
		label = "Mask" if mask > withoutMask else "No Mask"
		color = (0, 255, 0) if label == "Mask" else (0, 0, 255)

		# include the probability in the label
		label = f"{label} : {max(mask, withoutMask):.2f}%"

		# displaying the obtained label and bounding box rectangle on the output frame
		cv2.putText(frame, label, (startX, startY - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.45, color, 2)
		cv2.rectangle(frame, (startX, startY), (endX, endY), color, 2)

	# show the output frame
	cv2.imshow("Frame", frame)
	key = cv2.waitKey(1) & 0xFF

	# if the `q` key was pressed, break from the loop
	if key == ord("q"):
		break

# do a bit of cleanup
cv2.destroyAllWindows()
vs.stop()