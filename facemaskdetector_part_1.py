"""FaceMaskDetector_Part-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F_2z6wjViB5X1NEsZ9Ussb2yLX3GAWcH

# Face Mask Detection
"""

#Importing the Required Packages
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import AveragePooling2D
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Input
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.preprocessing.image import load_img
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelBinarizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from imutils import paths
import matplotlib.pyplot as plt
import numpy as np
import os

INIT_LR = 1e-4 # Initial learning_rate
EPOCHS = 30
BS = 32

DIRECTORY = r"E:/ML_projects/Face-Mask-Detection/dataset"
CATEGORIES = ["with_mask", "without_mask"]

data = [] #list of all images in the dataset
labels = [] #labels of the corresponding images

for category in CATEGORIES:
    path = os.path.join(DIRECTORY, category)
    for image in os.listdir(path):
        img_path = os.path.join(path, image)
        image = load_img(img_path, target_size = (224, 224))
        image = img_to_array(image)
        image = preprocess_input(image)
        
        data.append(image)
        labels.append(category)

# Performing Label Encoding
lb = LabelBinarizer()
labels = lb.fit_transform(labels) #0 -> with mask

# Performing OneHot Encoding
labels = to_categorical(labels)      

data = np.array(data, dtype = "float32")  
labels = np.array(labels)

# Splitting into Train & Test data
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.20, 
	                                                stratify=labels, random_state=42)

img_aug = ImageDataGenerator(rotation_range=20,
                          zoom_range=0.15,
                          width_shift_range=0.2,
                          height_shift_range=0.2,
                          shear_range=0.15,
                          horizontal_flip=True,
                          fill_mode="nearest")

"""### Performing Transfer Learning using MobileNet_V2"""

# NeuralNet rchitecture
base_model = MobileNetV2(weights="imagenet", include_top=False, input_tensor=Input(shape=(224, 224, 3)))

head_model = base_model.output
head_model = AveragePooling2D(pool_size=(7, 7))(head_model)
head_model = Flatten(name="flatten")(head_model)
head_model = Dense(128, activation="relu")(head_model)
head_model = Dropout(0.5)(head_model)
head_model = Dense(2, activation="softmax")(head_model)

model = Model(inputs = base_model.input, outputs = head_model)

# Freezing all layers in the base_model to prevent the weights from getting changed during the first training process
for layer in base_model.layers:
	layer.trainable = False

optimizer = Adam(lr=INIT_LR, decay=INIT_LR / EPOCHS)
model.compile(loss="binary_crossentropy", optimizer=optimizer, metrics=["accuracy"])

# Model Training
from keras.callbacks import EarlyStopping, ModelCheckpoint
es = EarlyStopping(monitor='val_loss', mode='auto', verbose=1, patience=5)
mc = ModelCheckpoint('E:/ML_projects/Face-Mask-Detection/SavedModel_2-0.99.h5', monitor='val_loss', save_best_only = True, verbose=1)

Head = model.fit(img_aug.flow(X_train, y_train, batch_size = BS),
                    steps_per_epoch=len(X_train) // BS,
                    validation_data=(X_test, y_test),
                    validation_steps=len(X_test) // BS,
                    epochs=EPOCHS, 
                    callbacks = [es, mc])


preds = model.predict(X_test, batch_size=BS)


# for each image in the Test Data we find the index of the label with corresponding largest predicted probability
preds = np.argmax(preds, axis=1)

# printing the classification_report
print(classification_report(y_test.argmax(axis=1), preds,
	                          target_names=lb.classes_))


model.save("E:/ML_projects/Face-Mask-Detection/savedModel.model", save_format="h5")